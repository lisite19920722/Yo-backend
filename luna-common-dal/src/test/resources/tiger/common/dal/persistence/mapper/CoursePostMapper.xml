<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="tiger.common.dal.persistence.mapper.CoursePostMapper" >
  <resultMap id="BaseResultMap" type="tiger.common.dal.persistence.course.CoursePostDO" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="owner_id" property="ownerId" jdbcType="BIGINT" />
    <result column="course_id" property="courseId" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="author" property="author" jdbcType="VARCHAR" />
    <result column="description" property="description" jdbcType="VARCHAR" />
    <result column="link" property="link" jdbcType="VARCHAR" />
    <result column="is_deleted" property="isDeleted" jdbcType="BIT" />
    <result column="is_archived" property="isArchived" jdbcType="BIT" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="tiger.common.dal.persistence.course.CoursePostDO" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, owner_id, course_id, create_time, update_time, title, author, description, link, 
    is_deleted, is_archived
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="tiger.common.dal.persistence.course.example.CoursePostExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from course_post
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="tiger.common.dal.persistence.course.example.CoursePostExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from course_post
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleWithBLOBsAndPage" resultMap="ResultMapWithBLOBs" parameterType="tiger.common.dal.persistence.course.example.CoursePostExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from course_post
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleAndPage" resultMap="BaseResultMap" parameterType="tiger.common.dal.persistence.course.example.CoursePostExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from course_post
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="tiger.common.dal.persistence.course.example.CoursePostExample" >
    delete from course_post
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="tiger.common.dal.persistence.course.example.CoursePostExample" resultType="java.lang.Integer" >
    select count(*) from course_post
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update course_post
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.ownerId != null" >
        owner_id = #{record.ownerId,jdbcType=BIGINT},
      </if>
      <if test="record.courseId != null" >
        course_id = #{record.courseId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = CURRENT_TIMESTAMP,
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.author != null" >
        author = #{record.author,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null" >
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.link != null" >
        link = #{record.link,jdbcType=VARCHAR},
      </if>
      <if test="record.isDeleted != null" >
        is_deleted = #{record.isDeleted,jdbcType=BIT},
      </if>
      <if test="record.isArchived != null" >
        is_archived = #{record.isArchived,jdbcType=BIT},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update course_post
    set id = #{record.id,jdbcType=BIGINT},
      owner_id = #{record.ownerId,jdbcType=BIGINT},
      course_id = #{record.courseId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = CURRENT_TIMESTAMP,
      title = #{record.title,jdbcType=VARCHAR},
      author = #{record.author,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      link = #{record.link,jdbcType=VARCHAR},
      is_deleted = #{record.isDeleted,jdbcType=BIT},
      is_archived = #{record.isArchived,jdbcType=BIT},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update course_post
    set id = #{record.id,jdbcType=BIGINT},
      owner_id = #{record.ownerId,jdbcType=BIGINT},
      course_id = #{record.courseId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = CURRENT_TIMESTAMP,
      title = #{record.title,jdbcType=VARCHAR},
      author = #{record.author,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      link = #{record.link,jdbcType=VARCHAR},
      is_deleted = #{record.isDeleted,jdbcType=BIT},
      is_archived = #{record.isArchived,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from course_post
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from course_post
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="tiger.common.dal.persistence.course.CoursePostDO" useGeneratedKeys="true" keyProperty="id" >
    insert into course_post (owner_id, course_id, create_time, 
      update_time, title, author, 
      description, link, is_deleted, 
      is_archived, content)
    values (#{ownerId,jdbcType=BIGINT}, #{courseId,jdbcType=BIGINT}, CURRENT_TIMESTAMP,
      CURRENT_TIMESTAMP, #{title,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR},
      #{description,jdbcType=VARCHAR}, #{link,jdbcType=VARCHAR}, #{isDeleted,jdbcType=BIT}, 
      #{isArchived,jdbcType=BIT}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="tiger.common.dal.persistence.course.CoursePostDO" useGeneratedKeys="true" keyProperty="id" >
    insert into course_post
    <trim prefix="(" suffix=")" suffixOverrides="," >
      owner_id,
      course_id,
      create_time,
      update_time,
      title,
      author,
      description,
      link,
      is_deleted,
      is_archived,
      content,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{ownerId,jdbcType=BIGINT},
      #{courseId,jdbcType=BIGINT},
      CURRENT_TIMESTAMP,
      CURRENT_TIMESTAMP,
      #{title,jdbcType=VARCHAR},
      #{author,jdbcType=VARCHAR},
      #{description,jdbcType=VARCHAR},
      #{link,jdbcType=VARCHAR},
      #{isDeleted,jdbcType=BIT},
      #{isArchived,jdbcType=BIT},
      #{content,jdbcType=LONGVARCHAR},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="tiger.common.dal.persistence.course.CoursePostDO" >
    update course_post
    <set >
      <if test="ownerId != null" >
        owner_id = #{ownerId,jdbcType=BIGINT},
      </if>
      <if test="courseId != null" >
        course_id = #{courseId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = CURRENT_TIMESTAMP,
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null" >
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="link != null" >
        link = #{link,jdbcType=VARCHAR},
      </if>
      <if test="isDeleted != null" >
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
      <if test="isArchived != null" >
        is_archived = #{isArchived,jdbcType=BIT},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="tiger.common.dal.persistence.course.CoursePostDO" >
    update course_post
    set owner_id = #{ownerId,jdbcType=BIGINT},
      course_id = #{courseId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = CURRENT_TIMESTAMP,
      title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      link = #{link,jdbcType=VARCHAR},
      is_deleted = #{isDeleted,jdbcType=BIT},
      is_archived = #{isArchived,jdbcType=BIT},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="tiger.common.dal.persistence.course.CoursePostDO" >
    update course_post
    set owner_id = #{ownerId,jdbcType=BIGINT},
      course_id = #{courseId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = CURRENT_TIMESTAMP,
      title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      link = #{link,jdbcType=VARCHAR},
      is_deleted = #{isDeleted,jdbcType=BIT},
      is_archived = #{isArchived,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <sql id="queryCoursePostCondition">
    <where>
        1=1
      <if test="query.states != null and query.states.size() > 0">
        AND state in
        <foreach collection="query.states" item="state" open="(" separator="," close=")">
          #{state}
        </foreach>
      </if>
      <if test="query.courseId != null">
        AND course_id = #{query.courseId}
      </if>
      <choose>
        <when test="null != query.startDate and null != query.endDate">
          AND create_time BETWEEN #{query.startDate} AND #{query.endDate}
        </when>
        <when test="null != query.startDate">
          AND create_time &gt;= #{query.startDate}
        </when>
        <when test="null != query.endDate">
          AND create_time &lt;= #{query.endDate}
        </when>
        <otherwise>
        </otherwise>
    </choose>
    </where>
  </sql>

  <select id="countCoursePosts" resultType="java.lang.Integer">
    select count(*) from course_post
    <include refid="queryCoursePostCondition"/>
  </select>

  <select id="queryCoursePosts" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from course_post
    <include refid="queryCoursePostCondition"/>
    order by create_time desc, id desc
    limit #{offset}, #{limit}
  </select>

</mapper>