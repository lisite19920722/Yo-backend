<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="tiger.common.dal.persistence.mapper.SmsVerifyCodeMapper">
    <resultMap id="BaseResultMap" type="tiger.common.dal.persistence.system.SmsVerifyCodeDO">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="code" property="code" jdbcType="VARCHAR"/>
        <result column="mobile" property="mobile" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="expire_time" property="expireTime" jdbcType="TIMESTAMP"/>
        <result column="is_active" property="isActive" jdbcType="BIT"/>
        <result column="sms_type" property="smsType" jdbcType="VARCHAR"/>
        <result column="account_id" property="accountId" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, code, mobile, create_time, expire_time, is_active, sms_type, account_id
    </sql>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="tiger.common.dal.persistence.system.example.SmsVerifyCodeExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from sms_verify_code
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExampleAndPage" resultMap="BaseResultMap"
            parameterType="tiger.common.dal.persistence.system.example.SmsVerifyCodeExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from sms_verify_code
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <delete id="deleteByExample" parameterType="tiger.common.dal.persistence.system.example.SmsVerifyCodeExample">
        delete from sms_verify_code
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <select id="countByExample" parameterType="tiger.common.dal.persistence.system.example.SmsVerifyCodeExample"
            resultType="java.lang.Integer">
        select count(*) from sms_verify_code
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update sms_verify_code
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.code != null">
                code = #{record.code,jdbcType=VARCHAR},
            </if>
            <if test="record.mobile != null">
                mobile = #{record.mobile,jdbcType=VARCHAR},
            </if>
            <if test="record.expireTime != null">
                expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.isActive != null">
                is_active = #{record.isActive,jdbcType=BIT},
            </if>
            <if test="record.smsType != null">
                sms_type = #{record.smsType,jdbcType=VARCHAR},
            </if>
            <if test="record.accountId != null">
                account_id = #{record.accountId,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update sms_verify_code
        set id = #{record.id,jdbcType=INTEGER},
        code = #{record.code,jdbcType=VARCHAR},
        mobile = #{record.mobile,jdbcType=VARCHAR},
        expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
        is_active = #{record.isActive,jdbcType=BIT},
        sms_type = #{record.smsType,jdbcType=VARCHAR},
        account_id = #{record.accountId,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from sms_verify_code
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from sms_verify_code
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="tiger.common.dal.persistence.system.SmsVerifyCodeDO" useGeneratedKeys="true"
            keyProperty="id">
        insert into sms_verify_code (code, mobile, create_time,
        expire_time, is_active, sms_type, account_id
        )
        values (#{code,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, CURRENT_TIMESTAMP,
        #{expireTime,jdbcType=TIMESTAMP}, #{isActive,jdbcType=BIT}, #{smsType,jdbcType=VARCHAR}, #{accountId,jdbcType=INTEGER}
        )
    </insert>
    <insert id="insertSelective" parameterType="tiger.common.dal.persistence.system.SmsVerifyCodeDO" useGeneratedKeys="true"
            keyProperty="id">
        insert into sms_verify_code
        <trim prefix="(" suffix=")" suffixOverrides=",">
            code,
            mobile,
            create_time,
            expire_time,
            is_active,
            sms_type,
            account_id,
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{code,jdbcType=VARCHAR},
            #{mobile,jdbcType=VARCHAR},
            CURRENT_TIMESTAMP,
            #{expireTime,jdbcType=TIMESTAMP},
            #{isActive,jdbcType=BIT},
            #{smsType,jdbcType=VARCHAR},
            #{accountId,jdbcType=INTEGER},
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="tiger.common.dal.persistence.system.SmsVerifyCodeDO">
        update sms_verify_code
        <set>
            <if test="code != null">
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="mobile != null">
                mobile = #{mobile,jdbcType=VARCHAR},
            </if>
            <if test="expireTime != null">
                expire_time = #{expireTime,jdbcType=TIMESTAMP},
            </if>
            <if test="isActive != null">
                is_active = #{isActive,jdbcType=BIT},
            </if>
            <if test="smsType != null">
                sms_type = #{smsType,jdbcType=VARCHAR},
            </if>
            <if test="accountId != null">
                account_id = #{accountId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="tiger.common.dal.persistence.system.SmsVerifyCodeDO">
        update sms_verify_code
        set code = #{code,jdbcType=VARCHAR},
        mobile = #{mobile,jdbcType=VARCHAR},
        expire_time = #{expireTime,jdbcType=TIMESTAMP},
        is_active = #{isActive,jdbcType=BIT},
        sms_type = #{smsType,jdbcType=VARCHAR},
        account_id = #{accountId,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="countVerifySmses" resultType="java.lang.Integer">
        <!--得到从begin到end发送给accountId类型为smsType的验证码短信个数-->
        select count(1)
        from sms_verify_code
        where account_id = #{accountId,jdbcType=INTEGER} and sms_type = #{smsType,jdbcType=VARCHAR}
            and create_time between #{begin, jdbcType=TIMESTAMP} and #{end, jdbcType=TIMESTAMP}
    </select>
</mapper>

