<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="tiger.common.dal.persistence.mapper.CourseCheckinMapper" >
  <resultMap id="BaseResultMap" type="tiger.common.dal.persistence.course.CourseCheckinDO" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="course_id" property="courseId" jdbcType="BIGINT" />
    <result column="account_id" property="accountId" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="check_time" property="checkTime" jdbcType="TIMESTAMP" />
    <result column="score" property="score" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="VARCHAR" />
    <result column="task_id" property="taskId" jdbcType="BIGINT" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, course_id, account_id, create_time, update_time, check_time, score, `state`, 
    task_id, remark
  </sql>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="tiger.common.dal.persistence.course.example.CourseCheckinExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from course_checkin
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleAndPage" resultMap="BaseResultMap" parameterType="tiger.common.dal.persistence.course.example.CourseCheckinExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from course_checkin
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="tiger.common.dal.persistence.course.example.CourseCheckinExample" >
    delete from course_checkin
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="tiger.common.dal.persistence.course.example.CourseCheckinExample" resultType="java.lang.Integer" >
    select count(*) from course_checkin
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update course_checkin
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.courseId != null" >
        course_id = #{record.courseId,jdbcType=BIGINT},
      </if>
      <if test="record.accountId != null" >
        account_id = #{record.accountId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = CURRENT_TIMESTAMP,
      </if>
      <if test="record.checkTime != null" >
        check_time = #{record.checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.score != null" >
        score = #{record.score,jdbcType=INTEGER},
      </if>
      <if test="record.state != null" >
        `state` = #{record.state,jdbcType=VARCHAR},
      </if>
      <if test="record.taskId != null" >
        task_id = #{record.taskId,jdbcType=BIGINT},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update course_checkin
    set id = #{record.id,jdbcType=BIGINT},
      course_id = #{record.courseId,jdbcType=BIGINT},
      account_id = #{record.accountId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = CURRENT_TIMESTAMP,
      check_time = #{record.checkTime,jdbcType=TIMESTAMP},
      score = #{record.score,jdbcType=INTEGER},
      `state` = #{record.state,jdbcType=VARCHAR},
      task_id = #{record.taskId,jdbcType=BIGINT},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from course_checkin
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from course_checkin
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="tiger.common.dal.persistence.course.CourseCheckinDO" useGeneratedKeys="true" keyProperty="id" >
    insert into course_checkin (course_id, account_id, create_time, 
      update_time, check_time, score, 
      `state`, task_id, remark
      )
    values (#{courseId,jdbcType=BIGINT}, #{accountId,jdbcType=BIGINT}, CURRENT_TIMESTAMP,
      CURRENT_TIMESTAMP, #{checkTime,jdbcType=TIMESTAMP}, #{score,jdbcType=INTEGER},
      #{state,jdbcType=VARCHAR}, #{taskId,jdbcType=BIGINT}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="tiger.common.dal.persistence.course.CourseCheckinDO" useGeneratedKeys="true" keyProperty="id" >
    insert into course_checkin
    <trim prefix="(" suffix=")" suffixOverrides="," >
      course_id,
      account_id,
      create_time,
      update_time,
      check_time,
      score,
      `state`,
      task_id,
      remark,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{courseId,jdbcType=BIGINT},
      #{accountId,jdbcType=BIGINT},
      CURRENT_TIMESTAMP,
      CURRENT_TIMESTAMP,
      #{checkTime,jdbcType=TIMESTAMP},
      #{score,jdbcType=INTEGER},
      #{state,jdbcType=VARCHAR},
      #{taskId,jdbcType=BIGINT},
      #{remark,jdbcType=VARCHAR},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="tiger.common.dal.persistence.course.CourseCheckinDO" >
    update course_checkin
    <set >
      <if test="courseId != null" >
        course_id = #{courseId,jdbcType=BIGINT},
      </if>
      <if test="accountId != null" >
        account_id = #{accountId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = CURRENT_TIMESTAMP,
      </if>
      <if test="checkTime != null" >
        check_time = #{checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="score != null" >
        score = #{score,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        `state` = #{state,jdbcType=VARCHAR},
      </if>
      <if test="taskId != null" >
        task_id = #{taskId,jdbcType=BIGINT},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="tiger.common.dal.persistence.course.CourseCheckinDO" >
    update course_checkin
    set course_id = #{courseId,jdbcType=BIGINT},
      account_id = #{accountId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = CURRENT_TIMESTAMP,
      check_time = #{checkTime,jdbcType=TIMESTAMP},
      score = #{score,jdbcType=INTEGER},
      `state` = #{state,jdbcType=VARCHAR},
      task_id = #{taskId,jdbcType=BIGINT},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>